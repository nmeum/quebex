{-# LANGUAGE TemplateHaskell #-}
-- The code generated by template-haskell does not have type signatures.
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}

module Language.QBE.Simulator.Expression where

import Data.Bits ((.&.))
import Data.ByteString.Builder qualified as B
import Data.Word (Word16, Word32, Word64, Word8)
import Language.QBE.Simulator.Error (EvalError (TypingError))
import Language.QBE.Simulator.Generator (generateOperators)
import Language.QBE.Types qualified as QBE

data RegVal
  = VByte Word8
  | VHalf Word16
  | VWord Word32
  | VLong Word64
  | VSingle Float
  | VDouble Double
  deriving (Show, Eq)

toBuilder :: RegVal -> B.Builder
toBuilder (VByte w) = B.word8 w
toBuilder (VHalf w) = B.word16LE w
toBuilder (VWord w) = B.word32LE w
toBuilder (VLong w) = B.word64LE w
toBuilder (VSingle w) = B.floatLE w
toBuilder (VDouble w) = B.doubleLE w

assertType :: QBE.BaseType -> RegVal -> Either EvalError RegVal
assertType QBE.Word v@(VWord _) = Right v
assertType QBE.Long v@(VLong _) = Right v
assertType QBE.Single v@(VSingle _) = Right v
assertType QBE.Double v@(VDouble _) = Right v
assertType _ _ = Left TypingError

checkedEval ::
  QBE.BaseType ->
  (RegVal -> RegVal -> Either EvalError RegVal) ->
  RegVal ->
  RegVal ->
  Either EvalError RegVal
checkedEval retTy op lhs rhs = lhs `op` rhs >>= assertType retTy

generateOperators
