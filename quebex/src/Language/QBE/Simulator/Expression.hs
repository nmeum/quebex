{-# LANGUAGE TemplateHaskell #-}
-- The code generated by template-haskell does not have type signatures.
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}

module Language.QBE.Simulator.Expression where

import Data.Bits ((.&.))
import Data.ByteString.Builder qualified as B
import Data.Word (Word16, Word32, Word64, Word8)
import Language.QBE.Simulator.Error (EvalError (TypingError))
import Language.QBE.Simulator.Generator (generateOperators)
import Language.QBE.Types qualified as QBE

data RegVal
  = EByte Word8
  | EHalf Word16
  | EWord Word32
  | ELong Word64
  | ESingle Float
  | EDouble Double
  deriving (Show, Eq)

toBuilder :: RegVal -> B.Builder
toBuilder (EByte w) = B.word8 w
toBuilder (EHalf w) = B.word16LE w
toBuilder (EWord w) = B.word32LE w
toBuilder (ELong w) = B.word64LE w
toBuilder (ESingle w) = B.floatLE w
toBuilder (EDouble w) = B.doubleLE w

assertType :: QBE.BaseType -> RegVal -> Either EvalError RegVal
assertType QBE.Word v@(EWord _) = Right v
assertType QBE.Long v@(ELong _) = Right v
assertType QBE.Single v@(ESingle _) = Right v
assertType QBE.Double v@(EDouble _) = Right v
assertType _ _ = Left TypingError

generateOperators
