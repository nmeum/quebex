* quebex-syntax:
	* Don't require jumps at the ends of basic blocks
	* Complete the literate Haskell specification
* quebex:
	* Expand support for arithmetic operations
	* Include 2-3 additional benchmark programs
	* Allow interception of function calls (see `make_symbolic` To-Do below)
* quebex-symex:
	* Cleanup the symbolic expression language implementation
	* Expand golden tests based on additional arithmetic operations (see above)
	* Consider a closer integration of the Store/Explorer and the Simulator
	* Implement address concretization using the abstract monad
	* Intercept function calls to allow the application to make memory symbolic through `make_symbolic`
	* Implement a custom memory based on the theory of arrays (how do other engines do this?!)
	* Ideally make the store pure by creating unconstrained symbolic values from Atoms later
	* Revise handling of state in: Store, ExecTree, Tracer, Explorer (maybe use a State Monad or smth.)
		* Presupposes refactor of the modular interpreter (see quebex To-Do above)
